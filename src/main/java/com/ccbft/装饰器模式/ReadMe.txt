java的输入输出流就大量使用了装饰器模式

装饰器模式（Decorator Pattern）是一种结构型设计模式，它允许您通过在运行时将对象包装在装饰器对象中来动态地改变对象的行为。

在装饰器模式中，有一个抽象组件接口，定义了要被装饰的对象的方法。然后有一组具体组件类实现了该接口，并提供了基本的功能。接下来，您可以创建一组装饰器类，这些类实现了相同的接口，并且还包含一个指向抽象组件对象的成员变量。这些装饰器类可以添加额外的功能或修改现有功能，而不需要更改原始对象或其他装饰器对象的代码。

当您需要对对象进行多个不同的修改时，装饰器模式特别有用。它允许您以一种灵活、可扩展和无需修改原始对象代码的方式实现功能。

以下是装饰器模式的主要参与者：

    Component：抽象组件接口定义了要被装饰的对象的方法。
    ConcreteComponent：具体组件类实现了 Component 接口并提供了基本的功能。
    Decorator：装饰器类实现了 Component 接口并包含一个指向抽象组件对象的成员变量。
    ConcreteDecorator：具体装饰器类实现了 Decorator 接口，并可以添加额外的功能或修改现有功能。

总之，装饰器模式提供了一种简单而灵活的方式来扩展对象的功能，同时还保持了代码的可维护性和可扩展性。

